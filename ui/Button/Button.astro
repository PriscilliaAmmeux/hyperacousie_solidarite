---
import type { ButtonProps } from '../../src/types/index.ts';

export interface Props extends ButtonProps {}

const { 
  variant = 'teal',
  size = 'md',
  href,
  target,
  class: className = '',
  disabled = false,
  type = 'button',
  icon,
  iconPosition = 'left'
} = Astro.props;

const baseClasses = [
  'inline-flex',
  'items-center', 
  'justify-center',
  'font-medium',
  'transition-all',
  'duration-300',
  'focus:outline-none',
  'focus:ring-2',
  'focus:ring-offset-2',
  'disabled:opacity-50',
  'disabled:cursor-not-allowed',
  'border',
  'drop-shadow-md',
  'hover:drop-shadow-lg'
].join(' ');

const variantClasses = {
  coral: 'btn-coral',
  teal: 'btn-teal', 
  white: 'btn-white'
};

const sizeClasses = {
  sm: 'text-sm',
  md: 'text-base', 
  lg: 'text-lg'
};


const selectedVariant = variantClasses[variant as keyof typeof variantClasses] || variantClasses.teal;
const buttonClasses = [
  baseClasses,
  selectedVariant,
  sizeClasses[size],
  className
].filter(Boolean).join(' ');

const Tag = href ? 'a' : 'button';
---

<Tag
  class={buttonClasses}
  href={href}
  target={target}
  disabled={disabled}
  type={!href ? type : undefined}
>
  {icon && iconPosition === 'left' && (
    <span 
      class="flex-shrink-0 inline-flex items-center" 
      set:html={icon} 
      aria-hidden="true"
    />
  )}
  
  <span class="flex items-center">
    <slot />
  </span>
  
  {icon && iconPosition === 'right' && (
    <span 
      class="flex-shrink-0 inline-flex items-center" 
      set:html={icon}
      aria-hidden="true" 
    />
  )}
</Tag>

<style>
  @import '../../src/styles/variables.css';
  
  :global(.btn-coral),
  :global(.btn-teal),
  :global(.btn-white) {
    border-radius: var(--button-border-radius) !important;
    transition: var(--button-transition);
    
    display: inline-flex !important;
    align-items: center !important;
    justify-content: center !important;
    gap: 0.5rem !important;
    
    padding: 0.75rem 1.5rem !important;
    
    cursor: pointer;
    text-decoration: none;
  }
  
  :global(.text-sm.btn-coral),
  :global(.text-sm.btn-teal),
  :global(.text-sm.btn-white) {
    padding: 0.5rem 1rem !important;
  }
  
  :global(.text-lg.btn-coral),
  :global(.text-lg.btn-teal),
  :global(.text-lg.btn-white) {
    padding: 1rem 2rem !important;
  }
  
  :global(.btn-coral:hover),
  :global(.btn-teal:hover),
  :global(.btn-white:hover) {
    transform: translateY(-1px);
  }
  
  :global(.btn-coral:disabled),
  :global(.btn-teal:disabled),
  :global(.btn-white:disabled) {
    cursor: not-allowed;
    transform: none;
  }
</style>
